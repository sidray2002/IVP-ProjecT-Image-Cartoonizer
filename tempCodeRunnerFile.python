# %%
import cv2
import numpy as np 
import matplotlib.pyplot as plt

# %%
def read_file(filename):
    img = cv2.imread(filename)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    #plt.imshow(img)
    #plt.show()
    return img

# %%
def edge_mask(img, line_size, blur_value):
    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    gray_blur=cv2.medianBlur(gray,blur_value)

    edges=cv2.adaptiveThreshold(gray_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, line_size, blur_value)

    #plt.imshow(edges, cmap= "binary")
    #plt.show()

    return edges

# %%
def color_quantization(img,k):

    data=np.float32(img).reshape((-1,3))

    criteria= (cv2.TERM_CRITERIA_EPS+cv2.TERM_CRITERIA_MAX_ITER,20,0.001)

    ret, label, center = cv2.kmeans(data, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    center= np.uint8(center)

    result = center[label.flatten()]
    result=result.reshape(img.shape)
    
    
    #plt.imshow(result)
    #plt.title(k)
    #plt.show()

    return result

# %%
def Blurr(blurred):
    plt.imshow(blurred)
    plt.show()

# %%
def cartoonizer(d,k,line_size, blur_value):
    filename = "image.jpg"
    img= read_file(filename)
    org_img= np.copy(img)
    img1 = color_quantization(img , k)
    blurred=cv2.bilateralFilter(img1, d, sigmaColor=200, sigmaSpace=200)
    edges= edge_mask(img, line_size, blur_value)
    c=cv2.bitwise_and(blurred, blurred, mask=edges)
    
    #Blurr(blurred)
    cv2.imshow(org_img)
    cv2.title("Original Image")
    cv2.show()
    str= "Cartoonized Image {} {} {} {}".format(d,k,line_size, blur_value)
    cv2.imshow(c)
    cv2.title(str)
    cv2.show()


